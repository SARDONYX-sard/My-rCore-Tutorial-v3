name: CI

on:
  push:
    branches:
      - "*"
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

jobs:
  parameters:
    name: Set parameters
    runs-on: ubuntu-latest
    outputs:
      TOOL_CHAIN: nightly-2022-08-28
    steps:
      - id: SET_PARAMS
        run: |
          echo "::set-output name=TOOL_CHAIN::$TOOL_CHAIN"

  setup:
    name: Setup
    needs: parameters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Cache rust-toolchain
        if: github.event_name != 'schedule'
        uses: actions/cache@v3
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
          key: toolchain-${{ needs.parameters.outputs.TOOL_CHAIN }}
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ needs.parameters.outputs.TOOL_CHAIN }}
          target: riscv64gc-unknown-none-elf
          profile: minimal
          components: rust-src, llvm-tools-preview

  formatting:
    name: Formatting
    runs-on: ubuntu-latest
    needs: ["parameters", "setup"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Restore cache rust-toolchain
        if: github.event_name != 'schedule'
        uses: actions/cache@v3
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
          key: toolchain-${{ needs.parameters.outputs.TOOL_CHAIN }}

      - name: Check formatting
        run: make fmt-check

  build:
    name: Build
    needs: ["parameters", "setup"]
    runs-on: ubuntu-latest
    env:
      RUSTC_FORCE_INCREMENTAL: 1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Restore cache rust-toolchain
        if: github.event_name != 'schedule'
        uses: actions/cache@v3
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
          key: toolchain-${{ needs.parameters.outputs.TOOL_CHAIN }}

      - name: Cache cargo dependencies
        id: cargo-dependencies
        uses: ./.github/actions/cache_cargo
      - name: Install dependencies
        if: steps.cargo-dependencies.outputs.cache-hit != 'true'
        run: cd os && make build

  lint:
    name: Check
    runs-on: ubuntu-latest
    needs: ["parameters", "setup", "build"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Restore cache rust-toolchain
        if: github.event_name != 'schedule'
        uses: actions/cache@v3
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
          key: toolchain-${{ needs.parameters.outputs.TOOL_CHAIN }}

      - name: Restore cargo cache
        uses: ./.github/actions/cache_cargo
      - name: Run `cargo check`
        run: make check

  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    env:
      RUSTC_FORCE_INCREMENTAL: 1
    needs: ["parameters", "setup", "build"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Cache QEMU
        uses: actions/cache@v3
        with:
          path: qemu-7.0.0
          key: qemu-7.0.0-x86_64-riscv64
      - name: Install QEMU
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build -y
          if [ ! -d qemu-7.0.0 ]; then
            wget https://download.qemu.org/qemu-7.0.0.tar.xz
            tar -xf qemu-7.0.0.tar.xz
            cd qemu-7.0.0
            ./configure --target-list=riscv64-softmmu
            make -j
          else
            cd qemu-7.0.0
          fi
          sudo make install
          qemu-system-riscv64 --version

      - name: Restore cache rust-toolchain
        if: github.event_name != 'schedule'
        uses: actions/cache@v3
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
          key: toolchain-${{ needs.parameters.outputs.TOOL_CHAIN }}

      - name: Restore cargo cache
        uses: ./.github/actions/cache_cargo
      - name: Run test
        run: cd ./os && make run TEST=1
        timeout-minutes: 10

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: ["parameters", "setup", "build"]
    env:
      RUSTC_FORCE_INCREMENTAL: 1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Restore cache rust-toolchain
        if: github.event_name != 'schedule'
        uses: actions/cache@v3
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
          key: toolchain-${{ needs.parameters.outputs.TOOL_CHAIN }}

      - name: Restore cargo cache
        uses: ./.github/actions/cache_cargo
      - name: Run `cargo clippy`
        run: make clippy
